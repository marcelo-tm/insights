/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ScopeImport } from './routes/scope'
import { Route as MetricsImport } from './routes/metrics'
import { Route as DecisionsImport } from './routes/decisions'
import { Route as BlockersImport } from './routes/blockers'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const ScopeRoute = ScopeImport.update({
  id: '/scope',
  path: '/scope',
  getParentRoute: () => rootRoute,
} as any)

const MetricsRoute = MetricsImport.update({
  id: '/metrics',
  path: '/metrics',
  getParentRoute: () => rootRoute,
} as any)

const DecisionsRoute = DecisionsImport.update({
  id: '/decisions',
  path: '/decisions',
  getParentRoute: () => rootRoute,
} as any)

const BlockersRoute = BlockersImport.update({
  id: '/blockers',
  path: '/blockers',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/blockers': {
      id: '/blockers'
      path: '/blockers'
      fullPath: '/blockers'
      preLoaderRoute: typeof BlockersImport
      parentRoute: typeof rootRoute
    }
    '/decisions': {
      id: '/decisions'
      path: '/decisions'
      fullPath: '/decisions'
      preLoaderRoute: typeof DecisionsImport
      parentRoute: typeof rootRoute
    }
    '/metrics': {
      id: '/metrics'
      path: '/metrics'
      fullPath: '/metrics'
      preLoaderRoute: typeof MetricsImport
      parentRoute: typeof rootRoute
    }
    '/scope': {
      id: '/scope'
      path: '/scope'
      fullPath: '/scope'
      preLoaderRoute: typeof ScopeImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/blockers': typeof BlockersRoute
  '/decisions': typeof DecisionsRoute
  '/metrics': typeof MetricsRoute
  '/scope': typeof ScopeRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/blockers': typeof BlockersRoute
  '/decisions': typeof DecisionsRoute
  '/metrics': typeof MetricsRoute
  '/scope': typeof ScopeRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/blockers': typeof BlockersRoute
  '/decisions': typeof DecisionsRoute
  '/metrics': typeof MetricsRoute
  '/scope': typeof ScopeRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/blockers' | '/decisions' | '/metrics' | '/scope'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/blockers' | '/decisions' | '/metrics' | '/scope'
  id: '__root__' | '/' | '/blockers' | '/decisions' | '/metrics' | '/scope'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BlockersRoute: typeof BlockersRoute
  DecisionsRoute: typeof DecisionsRoute
  MetricsRoute: typeof MetricsRoute
  ScopeRoute: typeof ScopeRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BlockersRoute: BlockersRoute,
  DecisionsRoute: DecisionsRoute,
  MetricsRoute: MetricsRoute,
  ScopeRoute: ScopeRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/blockers",
        "/decisions",
        "/metrics",
        "/scope"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/blockers": {
      "filePath": "blockers.tsx"
    },
    "/decisions": {
      "filePath": "decisions.tsx"
    },
    "/metrics": {
      "filePath": "metrics.tsx"
    },
    "/scope": {
      "filePath": "scope.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
